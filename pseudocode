public class GoFish

print "would you like the instructions on how to play go fish?"
  if they type "yes"
    print instructions
  if they type "no"
    print "ok, let's get started!"

instantiate random rng as new random
create arraylist<card> which is the Deck of cards for the game.
create player[] players 

create method Cards
      return (remove card from deck)
    public decksize
      return size of card array
  
  publice static void
    instantiate 'check' as new arraylist<card>
      for i is less than 4, increase variable by one
        for card c equal card values
          add c to cards
          
    instantiate object h as humanplayer
    instantiate ai as aiplayer
    instantiate players as new player[] {h, ai}
    
    while number of obtained books is less than 13
      print "----"
    
    create integer variables for the score of the player and for the score of the ai
    using the calculated score,
      if player's score is greater than the ai's score
        print "Congrats, you won!"
      else if ai's score is greater than the player's
        print "you lost"
      else
        print "it's a tie!"
     
     create enums for all cards (ace, two-ten, jack, queen, king) in order to allow only certain cards to be chosen
     
   class player
      instantiate arralylist<card> hand as new arraylist<card>
      create integer variable numbooks to keep track of books (4 of the same card)

      protected void fish
        if desk size is greater than 0
          draw new card
        else
          print "the deck is empty"

      public player
        for i increases by one and is less than 8
          call void fish to draw new card
      
      public boolean hasgiven
        return the type of card
      
      public boolean giveall
        instantiate arraylist<card> x as new arraylist<card>
        for i increases by 1 and is less than the hand size
          if hand at i equals type of card
            add i to x
        for c increases by 1 and is less than size of x
          remove card type
        return array x
      
      boolean askfor
        create integer tmp = 0
        if this is an instance of humanplayer
          tmp is 1
        player other is gofish.plays[tmp]
        if tmp is 1
          add card type to aiplayer
        if card type is other
          for card c is card type
            add c to hand
          return true
        
        else
          return false
          
 
    protected void fish
         if deck size is greater than 0
              draw new card
         else
              print "the deck is empty!"

 
    public int getnumbooks
        return numbooks
 
    protected Card checkforbooks
        for card c is less than hand
            integer num is 0
            for card d is less than hand 
               if c equals d
                  add one to num
            if num equals 4
                for integer i is less than 5, add 1
                   remove c from hand
                add 1 to numbooks
                return c
               
return null
 
    abstract void haveTurn
 
class humanplayer extends Player

    public void haveTurn
        
        Scanner scn is the new Scanner(System.in)
        
        boolean playing is true;
        do
            card book is checkforbooks()
            if book is not null
                  print "you got a book!"
 
            if the size of the hand is 0
                   print "your hand is empty!"
               break

            else
                   print "this is your hand" and the hand
           
            print "what hand will you ask for?"
 
            create object req
            try
                 req is the value of a card
            catch illegal argument exception
                "that's not a card in the deck, try again!"
                continue
            
 
            if the player's hand does not have req
            print "this card isn't in your hand, try again."
                continue
            
            print "you asked for" and req
            set object playing as askfor(req)

        while playing
              print "go fish!"
              call fish
 
class aiplayer extends Player //subclass of player

    set public ArrayList<Card> queries as the new ArrayList<Card>
    set private integer age as 0
 
    void haveTurn
    
        create boolean playing
        do
            card book is checkforbooks
            if book is not null
                print "the computer got a book of " and book
            if size of hand equals 0
                print "the computer's hand is empty."
                break
            
            Card req = aistrat
            print "the computer asks for" and req
            set object playing as askfor(req)
            add one to age
        while playing
         print "the computer went fishing"
        call fish
    
 

    private Card aistrat
    
        if age is greater than 2
        
        remove oldest entry
        age equals 0

        for integer i is one less than query size, is greater than -1 and decreases by 1
            if hand contains i
            
                return query with i removed 
          

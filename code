package go.fish;

import java.util.ArrayList; 
import java.util.Scanner; 
import java.util.Random;
 
public class GoFish
{
    static final Random rng = new Random();
    static private ArrayList<Card> cards;
    static public Player[] Players;


 

    
    public static Card draw()
	{
		return cards.remove(rng.nextInt(cards.size()));
	}
 
	public static int deckSize()
	{
		return cards.size();
    }
 
    public static void main(String[] args)
    {
        int ans;
        Scanner s=new Scanner (System.in);
        System.out.println("Would you like the instructions on how to play Go Fish? Press 1 for yes, 2 for no.");
        ans = s.nextInt();
        if (ans==1){
            System.out.println("You are going to ask the computer for a card (for example, \"Give me your kings\").");
            System.out.println("You must have at least one card of the rank in your own hand.");
            System.out.println("The computer must hand over all the cards requested.");
            System.out.println("If there is none, the computer will say, \"Go fish!\" and you will draw the top card of the stock and place it in your hand.");
            System.out.println("If you get one or more cards of the named rank you asked for, you can ask for another card.");
            System.out.println("You can ask for the same card or a different one. As long as you succeed in getting cards (makes a catch), your turn continues.");
            System.out.println("If a player gets all four cards of a kind, they get that book.");
            System.out.println("If you fishing without \"making a catch\" (does not receive a card he asked for), it’s the computer’s turn.");
            System.out.println("The game ends when all thirteen books have been won. The winner is the player with the most books.");
            System.out.println("During the game, if a player is left without cards, they may (when it's their turn to play), draw from the stock and then ask for cards of that rank.");
            System.out.println(" ");
                    
        }
        else{
            System.out.println("Let's get to it, then!");
        }
    
        cards = new ArrayList<Card>();
        for(int i=0;i<4;i++)
            for(Card c: Card.values())
                cards.add(c);
        Player h = new HumanPlayer();
        Player ai = new AIPlayer();
        Players = new Player[] {h, ai};
 
        while(Players[0].getNumBooks() + Players[1].getNumBooks() < 13)
        {
            Players[0].haveTurn();
            System.out.println("----------");
            Players[1].haveTurn();
            System.out.println("----------");
        }
 
        int yScore = Players[0].getNumBooks(); int aiScore = Players[1].getNumBooks();
        if (yScore > aiScore)
            System.out.println("Congratulations, you win "+ yScore + " to "+ aiScore +"!");
        else if (aiScore > yScore)
            System.out.println("You lost "+ yScore + " to "+ aiScore +":/");
        else
            System.out.println("It's a tie, you both have "+yScore);
    }
}
 
enum Card 
{
    ACE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, TEN, JACK, QUEEN, KING;
}
 
abstract class Player
{
    protected ArrayList<Card> hand = new ArrayList<Card>();
    private int numBooks;
 
    public Player()
    {
        for(int i=0;i<8;i++)
            fish();
    }
 
    public boolean hasGiven(Card cType)
    {
        return hand.contains(cType);
    }
 
    public ArrayList<Card> giveAll(Card cType)
    {
        ArrayList<Card> x = new ArrayList<Card>(); 
        for(int i=0;i<hand.size();i++)            
            if (hand.get(i) == cType)
              x.add(hand.get(i));
        for(int c=0;c<x.size();c++)
            hand.remove(cType);
        return x;
    }
 
    protected boolean askFor(Card cType)
    {
        int tmp = 0;
        if (this instanceof HumanPlayer)
            tmp = 1;
        Player other = GoFish.Players[tmp];

        if (tmp==1)
            ((AIPlayer) other).queries.add(cType);


        if (other.hasGiven(cType))
        {
            for(Card c: other.giveAll(cType))
                hand.add(c);
            return true;
        }
        else
        {
            return false;
        }
    }
 
    protected void fish()
	    {
	        if (GoFish.deckSize() > 0)
	        	hand.add(GoFish.draw());
	        else
	        	System.out.println("The deck is empty.");
    }
 
    public int getNumBooks()
    {
        return numBooks;
    }
    
    public void Mathone(){
    int response;
    Scanner s=new Scanner (System.in);
    System.out.println("What's 15+6*3?");
    response=s.nextInt();
    while (response!=33){
        System.out.println("Aww no.. try again, son.");
        response=s.nextInt();
    }
    }
    
    public void Mathtwo(){
    int response;
    Scanner s=new Scanner (System.in);
    System.out.println("What's 23/5+2/5?");
    response=s.nextInt();
    while (response!=5){
        System.out.println("Aww no.. try again, son.");
        response=s.nextInt();
    }
    }
        
    protected Card checkForBooks()
    {
        for(Card c: hand) 
        {
            int num = 0;
            for(Card d: hand)
              if (c == d)
                  num++;
            if (num == 4)
            {
                for(int i=0;i<4;i++)
                    hand.remove(c);
                numBooks++;
                return c;
            }
        }
        return null;
 
 
    }
 
    public abstract void haveTurn();
 
}
 
class HumanPlayer extends Player
{
    @Override
    public void haveTurn()
    {

        Scanner scn = new Scanner(System.in);
        
        boolean playing = true;
        do{
            Card book = checkForBooks();
            if(book != null)
                System.out.println("You got a book of " + book + "s!");
 
            if (hand.isEmpty())
            {
                System.out.print("Your hand is empty, you must "); 
                break;
            }
            else
            {
                System.out.print("Your hand:");
                for(Card c: hand)
                    System.out.print(c + " ");
                System.out.println();
            }
 
            System.out.println("Ask opponent for what card?");
 
            Card req;
            try{
                req = Card.valueOf(scn.next().toUpperCase());
            }
            catch(IllegalArgumentException e){ 
                System.out.println("Card not present in this deck. To continue, answer the question:");
                Mathtwo();
                continue;
            }
 
            if(!hand.contains(req))
            {
                System.out.println("You may not ask for a card you have none of. To continue, answer the question:");
                Mathone();
                continue;
            }
 
            System.out.println("You ask for a " + req);
            playing = askFor(req); 
        } while(playing);
        System.out.println("Go fish!");
        fish();
    }
}
 
class AIPlayer extends Player
{
    public ArrayList<Card> queries = new ArrayList<Card>();
    private int age = 0;
 
    @Override
    public void haveTurn()
    {
        boolean playing;
        do{
            Card book = checkForBooks();
            if(book != null)
                System.out.println("Your opponent got a book of " + book + "s...");
            if (hand.size() == 0)
            {
                System.out.print("Your opponent's hand is empty.");
                break;
            }
            Card req = aiMagic();
            System.out.println("Your opponent asks for " + req);
            playing = askFor(req);
            age++;
        } while(playing);
        System.out.println("Your opponent goes fishing.");
        fish();
    }
 
	//The AI's strategy is to first ask for things you asked for, since you have those things. If that doesn't work, it guesses a random value.
    private Card aiMagic()
    {
        if (age>2)
        {
            queries.remove(queries.size()-1); 
            age=0;                          
        }
        for(int i=queries.size()-1; i>-1; i--) 
            if (hand.contains(queries.get(i)))
            {
                return queries.remove(i); 
            }                            
        return hand.get(GoFish.rng.nextInt(hand.size()));
    }
}
